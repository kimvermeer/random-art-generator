{"version":3,"sources":["Canvas.jsx","App.js","serviceWorker.js","index.js"],"names":["Canvas","state","palette","random","shuffle","pick","palettes","points","background","character","count","size","createGrid","_this","x","y","u","v","radius","Math","abs","noise2D","push","color","rotation","position","changePattern","setState","filter","value","changeColor","setBackground","e","target","setCharacter","setCount","setSize","this","drawCanvas","_this2","context","myCanvas","getContext","width","height","fillStyle","fillRect","forEach","_ref","_position","Object","slicedToArray","lerp","save","font","concat","translate","rotate","fillText","restore","_this3","react_default","a","createElement","Fragment","id","className","type","onChange","onClick","ref","canvas","Component","App","src_Canvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAyKeA,6MAnKbC,MAAQ,CACNC,QAASC,IAAOC,QAAQD,IAAOE,KAAKC,IACpCC,OAAQ,GACRC,WAAY,OACZC,UAAW,IACXC,MAAO,GACPC,KAAM,KAcRC,WAAa,WAIX,IAHA,IAAML,EAAS,GACTG,EAAQG,EAAKZ,MAAMS,MAEhBI,EAAI,EAAGA,EAAIJ,EAAOI,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAC9B,IAAMC,EAAIN,GAAS,EAAI,GAAMI,GAAKJ,EAAQ,GACpCO,EAAIP,GAAS,EAAI,GAAMK,GAAKL,EAAQ,GACpCQ,EAASC,KAAKC,IAAIjB,IAAOkB,QAAQL,EAAGC,IAAMJ,EAAKZ,MAAMU,KAE3DJ,EAAOe,KAAK,CACVC,MAAOpB,IAAOE,KAAKQ,EAAKZ,MAAMC,SAC9BgB,SACAM,SAAUrB,IAAOkB,QAAQL,EAAGC,GAC5BQ,SAAU,CAACT,EAAGC,KAKpB,OAAOV,KA6BTmB,cAAgB,WACdb,EAAKc,SAAS,CACZpB,OAAQM,EAAKD,aAAagB,OAAO,kBAAMzB,IAAO0B,QAAU,UAI5DC,YAAc,WACZjB,EAAKc,SACH,CACEzB,QAASC,IAAOC,QAAQD,IAAOE,KAAKC,KAEtC,WACEO,EAAKa,qBAKXK,cAAgB,SAAAC,GACdnB,EAAKc,SAAS,CACZnB,WAAYwB,EAAEC,OAAOJ,WAIzBK,aAAe,SAAAF,GACbnB,EAAKc,SAAS,CACZlB,UAAWuB,EAAEC,OAAOJ,WAIxBM,SAAW,SAAAH,GACTnB,EAAKc,SAAS,CAAEjB,MAAOsB,EAAEC,OAAOJ,OAAS,WACvChB,EAAKa,qBAITU,QAAU,SAAAJ,GACRnB,EAAKc,SAAS,CAAEhB,KAAMqB,EAAEC,OAAOJ,OAAS,WACtChB,EAAKa,sGA9FPW,KAAKX,gBACLW,KAAKC,0DAKLD,KAAKC,kDAyBM,IAAAC,EAAAF,KACLG,EAAUH,KAAKI,SAASC,WAAW,MACnCC,EAAQN,KAAKI,SAASE,MACtBC,EAASP,KAAKI,SAASG,OACvBrC,EAAS8B,KAAKpC,MAAMM,OAG1BiC,EAAQK,UAAYR,KAAKpC,MAAMO,WAC/BgC,EAAQM,SAAS,EAAG,EAAGH,EAAOC,GAE9BrC,EAAOwC,QAAQ,SAAAC,GAA2C,IAAxCzB,EAAwCyB,EAAxCzB,MAAOE,EAAiCuB,EAAjCvB,SAAUP,EAAuB8B,EAAvB9B,OAAQM,EAAewB,EAAfxB,SAAeyB,EAAAC,OAAAC,EAAA,EAAAD,CACzCzB,EADyC,GACjDT,EADiDiC,EAAA,GAC9ChC,EAD8CgC,EAAA,GAElDnC,EAAIsC,eAPG,EAOUT,EAPV,EAO0B3B,GACjCD,EAAIqC,eARG,EAQUR,EARV,EAQ2B3B,GAExCuB,EAAQa,OACRb,EAAQK,UAAYtB,EACpBiB,EAAQc,KAAR,GAAAC,OAAkBrC,EAASyB,EAA3B,kBACAH,EAAQgB,UAAU1C,EAAGC,GACrByB,EAAQiB,OAAOjC,GACfgB,EAAQkB,SAASnB,EAAKtC,MAAMQ,UAAW,EAAG,GAE1C+B,EAAQmB,6CA6CH,IAAAC,EAAAvB,KACP,OACEwB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,WAASE,GAAG,QACVJ,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLtC,MAAOQ,KAAKpC,MAAMO,WAClB4D,SAAU/B,KAAKN,iBAGnB8B,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLtC,MAAOQ,KAAKpC,MAAMQ,UAClB2D,SAAU/B,KAAKH,gBAGnB2B,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,SACLtC,MAAOQ,KAAKpC,MAAMS,MAClB0D,SAAU/B,KAAKF,YAGnB0B,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,SACLtC,MAAOQ,KAAKpC,MAAMU,KAClByD,SAAU/B,KAAKD,WAGnByB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,UAAQM,QAAShC,KAAKP,aAAtB,mBAGJ+B,EAAAC,EAAAC,cAAA,WAASE,GAAG,YACVJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEO,IAAK,SAAAC,GAAM,OAAKX,EAAKnB,SAAW8B,GAChC3B,OAAQ,IACRD,MAAO,iBA3JA6B,aCeNC,mLAbX,OACEZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,mCAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACW,EAAD,eARQF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c79481d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { lerp } from 'canvas-sketch-util/math';\nimport random from 'canvas-sketch-util/random';\nimport palettes from 'nice-color-palettes';\n\nclass Canvas extends Component {\n  state = {\n    palette: random.shuffle(random.pick(palettes)),\n    points: [],\n    background: '#000',\n    character: '=',\n    count: 30,\n    size: 1,\n  };\n\n  // The canvas is drawn when the component is mounted.\n  componentDidMount() {\n    this.changePattern();\n    this.drawCanvas();\n  }\n\n  // The canvas is drawn when the component updates.\n  componentDidUpdate() {\n    this.drawCanvas();\n  }\n\n  createGrid = () => {\n    const points = [];\n    const count = this.state.count;\n\n    for (let x = 0; x < count; x++) {\n      for (let y = 0; y < count; y++) {\n        const u = count <= 1 ? 0.5 : x / (count - 1);\n        const v = count <= 1 ? 0.5 : y / (count - 1);\n        const radius = Math.abs(random.noise2D(u, v)) * this.state.size;\n\n        points.push({\n          color: random.pick(this.state.palette),\n          radius,\n          rotation: random.noise2D(u, v),\n          position: [u, v],\n        });\n      }\n    }\n\n    return points;\n  };\n\n  drawCanvas() {\n    const context = this.myCanvas.getContext('2d');\n    const width = this.myCanvas.width;\n    const height = this.myCanvas.height;\n    const points = this.state.points;\n    const margin = 0;\n\n    context.fillStyle = this.state.background;\n    context.fillRect(0, 0, width, height);\n\n    points.forEach(({ color, position, radius, rotation }) => {\n      const [u, v] = position;\n      const x = lerp(margin, width - margin, u);\n      const y = lerp(margin, height - margin, v);\n\n      context.save();\n      context.fillStyle = color;\n      context.font = `${radius * width}px \"Helvetica\"`;\n      context.translate(x, y);\n      context.rotate(rotation);\n      context.fillText(this.state.character, 0, 0);\n\n      context.restore();\n    });\n  }\n\n  changePattern = () => {\n    this.setState({\n      points: this.createGrid().filter(() => random.value() > 0.5),\n    });\n  };\n\n  changeColor = () => {\n    this.setState(\n      {\n        palette: random.shuffle(random.pick(palettes)),\n      },\n      () => {\n        this.changePattern();\n      },\n    );\n  };\n\n  setBackground = e => {\n    this.setState({\n      background: e.target.value,\n    });\n  };\n\n  setCharacter = e => {\n    this.setState({\n      character: e.target.value,\n    });\n  };\n\n  setCount = e => {\n    this.setState({ count: e.target.value }, () => {\n      this.changePattern();\n    });\n  };\n\n  setSize = e => {\n    this.setState({ size: e.target.value }, () => {\n      this.changePattern();\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <section id=\"form\">\n          <legend className=\"form-group\">\n            <label>Background </label>\n            <input\n              type=\"text\"\n              value={this.state.background}\n              onChange={this.setBackground}\n            />\n          </legend>\n          <legend className=\"form-group\">\n            <label>Character </label>\n            <input\n              type=\"text\"\n              value={this.state.character}\n              onChange={this.setCharacter}\n            />\n          </legend>\n          <legend className=\"form-group\">\n            <label>Grid count</label>\n            <input\n              type=\"number\"\n              value={this.state.count}\n              onChange={this.setCount}\n            />\n          </legend>\n          <legend className=\"form-group\">\n            <label>Size</label>\n            <input\n              type=\"number\"\n              value={this.state.size}\n              onChange={this.setSize}\n            />\n          </legend>\n          <legend className=\"form-group\">\n            <button onClick={this.changeColor}>Change color!</button>\n          </legend>\n        </section>\n        <section id=\"creative\">\n          <div>\n            <canvas\n              ref={canvas => (this.myCanvas = canvas)}\n              height={768}\n              width={1024}\n            />\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Canvas from './Canvas';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <header>\n          <h1>Random Art Generator</h1>\n        </header>\n        <main>\n          <Canvas />\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}